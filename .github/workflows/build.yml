name: Continuous Integration Checks

on: [push, pull_request]

env:
  NUGET_PACKAGE_VERSION: 0.0.0.3

jobs:
  c_sharp_determinism:
    runs-on: ubuntu-latest
    # Ubuntu's version of clang doesn't support....anything that should work.
    # Ubuntu is an utter trash OS and should generally never be used for anything.
    # We also require dotnet so we use fedora
    container: fedora:39
    strategy:
      fail-fast: false
    steps:
      - name: Install required dependencies
        run: |
          dnf install -y mingw64-gcc git cargo dotnet clang llvm lld faketime rust-std-static-x86_64-pc-windows-gnu which diffutils rust-src
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install cbindgen
        run: |
          cargo install cbindgen
      - name: Checkout Rust-Lightning and LDK-C-Bindings git
        run: |
          git config --global safe.directory '*'
          git config --global user.email "ldk-ci@example.com"
          git config --global user.name "LDK CI"
          # Note this is a different endpoint, as we need one non-upstream commit!
          git clone https://github.com/lightningdevkit/rust-lightning
          cd rust-lightning
          git checkout origin/0.0.121-bindings
          cd ..
          git clone https://github.com/lightningdevkit/ldk-c-bindings
          cd ldk-c-bindings
          git checkout 0.0.121
      - name: Fetch MacOS SDK
        run: |
          curl -o Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers.tar.gz https://bitcoincore.org/depends-sources/sdks/Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers.tar.gz
          tar xvvf Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers.tar.gz
      - name: Rebuild C bindings with STD
        run: |
          export MACOS_SDK="$PWD/Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers"
          cd ldk-c-bindings
          export LDK_C_BINDINGS_EXTRA_TARGETS=x86_64-pc-windows-gnu
          export LDK_C_BINDINGS_EXTRA_TARGET_CCS=`pwd`/deterministic-build-wrappers/clang-x86_64-windows
          export LDK_C_BINDINGS_EXTRA_TARGET_LINK_LTO=true
          ./genbindings.sh ../rust-lightning true
      - name: Remove checked-in source to ensure its correctly checked-in
        run: rm c_sharp/src/org/ldk/enums/*.cs c_sharp/src/org/ldk/impl/*.cs c_sharp/src/org/ldk/structs/*.cs
      - name: Build Windows C# Bindings
        run: |
          export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="v$NUGET_PACKAGE_VERSION"
          LDK_TARGET=x86_64-pc-windows-gnu LDK_TARGET_CPU=sandybridge ./genbindings.sh ./ldk-c-bindings/ c_sharp false false
      - name: Build Linux C# Bindings
        run: |
          export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="v$NUGET_PACKAGE_VERSION"
          ./genbindings.sh ./ldk-c-bindings/ c_sharp false false
      - name: Build macOS x86-64 C# Bindings
        run: |
          export MACOS_SDK="$PWD/Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers"
          export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="v$NUGET_PACKAGE_VERSION"
          CC=clang LDK_TARGET=x86_64-apple-darwin LDK_TARGET_CPU=sandybridge ./genbindings.sh ./ldk-c-bindings/ c_sharp false false
      - name: Build macOS aarch64 C# Bindings
        run: |
          export MACOS_SDK="$PWD/Xcode-12.2-12B45b-extracted-SDK-with-libcxx-headers"
          export LDK_GARBAGECOLLECTED_GIT_OVERRIDE="v$NUGET_PACKAGE_VERSION"
          CC=clang LDK_TARGET=aarch64-apple-darwin LDK_TARGET_CPU=apple-a14 ./genbindings.sh ./ldk-c-bindings/ c_sharp false false
      - name: Build Release NUPKG
        run: |
          cd c_sharp
          ./build-release-nupkg.sh
      - uses: actions/upload-artifact@v3
        with:
          name: LdkSharp.nupkg
          path: c_sharp/LdkSharp.nupkg
      - name: Publish nuget package on nuget.org
        run: |
          if [ ${{ secrets.NUGET_API_KEY }} ]; then
            dotnet nuget push c_sharp/LdkSharp.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
          fi
